#######################################
# Shiny App Competition
# 
# Car Accident Data - Midwest Focus
#######################################

# Import necessary libraries
library(shiny)
library(shinythemes)
library(ggplot2)
library(ggiraph)
library(mapdata)
library(dplyr)
library(readr)
library(stringr)
library(maps)
library(shinydashboard)
library(shinyalert)
library(shinycssloaders)
library(DT)
library(lubridate)
library(rsconnect)

####################################################
# The following code will perform all necessary
# Data manipulations and data reading
# That will be used in the following shiny app
####################################################


#Load accident data and prepare it
accident <- read_csv("accident.csv") 
population <- read_csv("Census.csv")

#look at data 
# install.packages("Hmisc")
# library(Hmisc)
# describe(population)


# Filter data for Midwest states
midwest_states <- c("Illinois", "Indiana", "Iowa", "Kansas", "Michigan", "Minnesota", "Missouri", "Nebraska", 
                    "North Dakota", "Ohio", "South Dakota", "Wisconsin")


# Group data by state, county, and month name
accidents_midwest <- accident %>%
  filter(STATENAME %in% midwest_states) %>%
  mutate(MONTHNAME = month(MONTH, label = TRUE, abbr = FALSE)) %>%  # Add full month names
  group_by(STATENAME, COUNTYNAME, MONTHNAME) %>%
  summarize(total_fatalities = sum(FATALS), .groups = 'drop')


#grab only the populations of Midwestern states for normalization
population_midwest <- population %>%
  filter(NAME %in% midwest_states) %>%
  rename(POPULATION = POPESTIMATE2019) %>%   # Ensure population column is named consistently
    rename(STATENAME = NAME) %>%             # Ensure STATENAME is named consistently
    select(STATENAME, POPULATION)            # Only Grabs the State name and population  

#Merge population onto the accidents data frame
accidents_midwest <- accidents_midwest %>%
  left_join(population_midwest, by = c("STATENAME"))


####################################################
# The following code will declare the UI of the 
# application that will be displayed to the user for
# them to choose to do with as they please
####################################################

ui <- dashboardPage(
  # Creates the Dashboard Used by the App
  dashboardHeader(
    title = "Midwest Car Accidents (2021)",
    titleWidth = 300
  ),
  # Disable the sidebar from dashboard
  dashboardSidebar(disable = TRUE),
  dashboardBody(
    # Tabset Panel for the main tabs
    tabsetPanel(
      id = "main_tabs",  # ID for the tabsetPanel
      
      # Heat Map Tab
      tabPanel(
        title = "Heat Map",
        fluidRow(
          box(
            title = tagList(icon("sliders-h"), "Select View Options"),
            width = 4,
            solidHeader = TRUE,
            status = "primary",
            selectInput(
              "selection_type",
              HTML("<i class='fa fa-map-marker-alt'></i> View Options:"), # HTML adds map marker icon
              choices = c("All Midwest States", "One State", "Two States"),
              selected = "All Midwest States"
            ),
            uiOutput("state_select_ui")
          ),
          box(
            title = tagList(icon("map"), "Heat Map of Fatal Car Accidents in the Midwest"),
            width = 8,
            solidHeader = TRUE,
            status = "info",
            girafeOutput("heatmap", height = "800px") %>%  # "height = '800px'" forces graph to fit correctly
              withSpinner()  # uses the shinycssloaders package
          )
        )
      ),
      
      # Summary Tab 
      tabPanel(
        title = "Summary",
        uiOutput("summary_ui")  # Dynamically render the summary layout
      ),
      # Fatalities by Month Tab
      tabPanel(
        title = "Fatalities by Month",
        uiOutput("heatmap_ui")
      )
    )
  )
)

            

####################################################
# The following code is reactive so that whatever 
# the user selects in the code, the graphics will 
# react accordingly to what they choose
####################################################

# Server logic
server <- function(input, output, session) {
  # Makes a popup describing the app to the user
  observe({
    shinyalert(
      title = "Welcome to the Midwest Car Accident Dashboard",
      text = "Explore data on car accident fatalities across Midwest states, 
              Use the options below to get started!",
        type = "info",
        closeOnEsc = TRUE,
          closeOnClickOutside = TRUE,
          showConfirmButton = TRUE,
            confirmButtonText = "Get Started"
    )
  })
  
  # Dynamic UI for states based on user selection
  output$state_select_ui <- renderUI({
    if (input$selection_type == "One State") {
      selectInput("state1", "Select State:", choices = midwest_states)
    } else if (input$selection_type == "Two States") {
      tagList(
        selectInput("state1", "Select First State:", choices = midwest_states),
        selectInput("state2", "Select Second State:", choices = midwest_states)
      )
    }
  })
  
################################################################################  
  
  # Bases on User Selection for monthly heat map
  output$heatmap_ui <- renderUI({
    if (input$selection_type == "All Midwest States") {
      fluidRow(
        column(
          width = 12,
          div(
            style = "overflow-y: scroll; max-height: 800px;",  # Enable vertical scrolling
            uiOutput("midwest_heatmaps")  # Dynamic heatmaps for Midwest states
          )
        )
      )
    } else if (input$selection_type == "One State") {
      fluidRow(
        column(
          width = 12,
          box(
            title = paste("Monthly Heatmap for", input$state1),
            width = NULL,
            solidHeader = TRUE,
            status = "primary",
            withSpinner(plotOutput("monthly_heatmap1", height = "600px"))
          )
        )
      )
    } else if (input$selection_type == "Two States") {
      fluidRow(
        column(
          width = 6,
          box(
            title = paste("Monthly Heatmap for", input$state1),
            width = NULL,
            solidHeader = TRUE,
            status = "primary",
            withSpinner(plotOutput("monthly_heatmap1", height = "600px"))
          )
        ),
        column(
          width = 6,
          box(
            title = paste("Monthly Heatmap for", input$state2),
            width = NULL,
            solidHeader = TRUE,
            status = "primary",
            withSpinner(plotOutput("monthly_heatmap2", height = "600px"))
          )
        )
      )
    }
  })
  
################################################################################ 
  
  # Makes heat map for all states in midwest for that selection
  output$midwest_heatmaps <- renderUI({
    req(input$selection_type == "All Midwest States")
    
    # Generate a heatmap for each Midwest state
    heatmap_list <- lapply(midwest_states, function(state) {
      plotname <- paste0("heatmap_", state)  # Create a unique name for each plotOutput
      
      output[[plotname]] <- renderPlot({
        monthly_data <- accidents_midwest %>%
          filter(STATENAME == state) %>%
          group_by(MONTHNAME) %>%
          summarize(Total_Fatalities = sum(total_fatalities), .groups = 'drop')
        
        ggplot(monthly_data, aes(x = MONTHNAME, y = Total_Fatalities, fill = Total_Fatalities)) +
          geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
          scale_fill_gradient(low = "lightblue", high = "red", na.value = "gray") +
          theme_minimal() +
          labs(
            title = paste("Monthly Fatalities Heatmap for", state),
            x = "Month",
            y = "Total Fatalities"
          ) +
          theme(axis.text.x = element_text(angle = 45, hjust = 1))
      })
      
      # Wrap each plot in a box
      box(
        title = state,
        width = 12,
        solidHeader = TRUE,
        status = "primary",
        withSpinner(plotOutput(plotname, height = "600px"))
      )
    })
    
    # Return all heatmaps wrapped in a scrollable layout
    tagList(heatmap_list)
  })
  
################################################################################  
  
  # Dynamic UI for the summary tab based on each different selection by user
  output$summary_ui <- renderUI({
    if (input$selection_type == "Two States") {
      fluidRow(
        # Box for State 1
        column(
          width = 6,
          box(
            width = NULL,
            solidHeader = TRUE,
            status = "info",  # Matches theme
            h4(
              textOutput("state1_total_fatalities"), 
              style = "text-align: center; margin-bottom: 0;"
            )
          )
        ),
        # Box for State 2
        column(
          width = 6,
          box(
            width = NULL,
            solidHeader = TRUE,
            status = "info",  # Matches theme
            h4(
              textOutput("state2_total_fatalities"), 
              style = "text-align: center; margin-bottom: 0;"
            )
          )
        ),
        # Data Table for State 1
        column(
          width = 6,
          box(
            title = "State 1 Summary",
            width = NULL,
            solidHeader = TRUE,
            status = "primary",
            DT::dataTableOutput("summary_table1")  # First state's summary table
          )
        ),
        # Data Table for State 2
        column(
          width = 6,
          box(
            title = "State 2 Summary",
            width = NULL,
            solidHeader = TRUE,
            status = "primary",
            DT::dataTableOutput("summary_table2")  # Second state's summary table
          )
        )
      )
    } else {
      fluidRow(
        column(
          width = 8,  # Adjust width to match the table
          offset = 2, # Center the box horizontally
          box(
            width = NULL,
            solidHeader = TRUE,
            status = "info",  # Matches theme
            h4(
              strong(textOutput("total_fatalities")), 
              style = "text-align: center; margin-bottom: 0;"
            )
          )
        ),
        column(
          width = 8,  # Adjust width to center the table
          offset = 2, # Center it horizontally
          box(
            title = if (input$selection_type == "All Midwest States") {
              "Midwest Summary"
            } else {
              paste("Summary for", input$state1)
            },
            width = NULL,
            solidHeader = TRUE,
            status = "primary",
            DT::dataTableOutput("summary_table1")  # Single summary table
          )
        )
      )
    }
  })
  
################################################################################  
  # Summary of total fatalities
  output$state1_total_fatalities <- renderText({
    req(input$selection_type == "Two States")
    state1 <- input$state1
    total <- accidents_midwest %>%
      filter(STATENAME == state1) %>%
      summarize(Total_Fatalities = sum(total_fatalities, na.rm = TRUE)) %>%
        pull(Total_Fatalities)
        paste("Total Fatalities in", state1, ":", total)
  })
  
################################################################################  
  
  # For the Two State selection
  output$state2_total_fatalities <- renderText({
    req(input$selection_type == "Two States")
    state2 <- input$state2
      total <- accidents_midwest %>%
      filter(STATENAME == state2) %>%
        summarize(Total_Fatalities = sum(total_fatalities, na.rm = TRUE)) %>%
        pull(Total_Fatalities)
          paste("Total Fatalities in", state2, ":", total)
  })
  
################################################################################  
  
  # For the all midwest and one state selection
  output$total_fatalities <- renderText({
    if (input$selection_type == "All Midwest States") {
      # Total fatalities across all Midwest states
      total <- sum(accidents_midwest$total_fatalities, na.rm = TRUE)
      paste("Total Fatalities in Midwest:", total)
    } else if (input$selection_type == "One State") {
      # Total fatalities for the selected state
      selected_state <- input$state1
      total <- accidents_midwest %>%
        filter(STATENAME == selected_state) %>%
        summarize(Total_Fatalities = sum(total_fatalities, na.rm = TRUE)) %>%
          pull(Total_Fatalities)
          paste("Total Fatalities in", selected_state, ":", total)
    }
  })
  
################################################################################  
  
  # For all midwest states and one state selections summary tables
  output$summary_table1 <- DT::renderDataTable({
    req(input$selection_type)
    
    if (input$selection_type == "All Midwest States") {
      # State-level summary for all Midwest states
      summary_data <- accidents_midwest %>%
        group_by(STATENAME) %>%
        summarize(
          Total_Fatalities = sum(total_fatalities),
          Population = sum(POPULATION),
          Fatalities_Per_100k = round((sum(total_fatalities) / sum(POPULATION)) * 100000, 2),
          .groups = 'drop'
        ) %>%
        rename(
          `State Name` = STATENAME,
          `Fatalities Per 100k` = Fatalities_Per_100k,
          `Total Fatalities` = Total_Fatalities
        ) %>%
        select(`State Name`, `Total Fatalities`, `Fatalities Per 100k`)  # Include only necessary columns
    } else {
      # County-level summary for one state or two states
      selected_state <- if (input$selection_type == "One State") {
        input$state1
      } else {
        input$state1  # State 1 for two states selection
      }
      summary_data <- accidents_midwest %>%
        filter(STATENAME == selected_state) %>%
        group_by(STATENAME, COUNTYNAME) %>%
        summarize(
          Total_Fatalities = sum(total_fatalities),
          .groups = 'drop'
        ) %>%
        mutate(
          COUNTYNAME = str_remove(COUNTYNAME, " \\(.*\\)"),  # Remove numbers in parentheses
          COUNTYNAME = str_to_title(COUNTYNAME),  # Proper capitalization
          STATENAME = ifelse(row_number() == 1 | lag(STATENAME, default = "") != STATENAME, STATENAME, "")  # Suppress repeats
        ) %>%
        rename(
          `State Name` = STATENAME,
          County = COUNTYNAME,
          `Total Fatalities` = Total_Fatalities
        )
    }
    
    datatable(
      summary_data,
      options = list(
        dom = 't',  # Remove search box and pagination controls
        paging = FALSE,  # Disable pagination
        ordering = FALSE  # Disable column sorting
      ),
      rownames = FALSE
    )
  })
################################################################################    
  
  #For the two state selection Data table
  output$summary_table2 <- DT::renderDataTable({
    req(input$selection_type == "Two States")
    
    # County-level summary for the second state in two states
    selected_state <- input$state2
    summary_data <- accidents_midwest %>%
      filter(STATENAME == selected_state) %>%
      group_by(STATENAME, COUNTYNAME) %>%
      summarize(
        Total_Fatalities = sum(total_fatalities),
        .groups = 'drop'
      ) %>%
      mutate(
        COUNTYNAME = str_remove(COUNTYNAME, " \\(.*\\)"),  # Remove numbers in parentheses
        COUNTYNAME = str_to_title(COUNTYNAME),  # Proper capitalization
        STATENAME = ifelse(row_number() == 1 | lag(STATENAME, default = "") != STATENAME, STATENAME, "")  # Suppress repeats
      ) %>%
      rename(
        `State Name` = STATENAME,
        County = COUNTYNAME,
        `Total Fatalities` = Total_Fatalities
      )
    
    datatable(
      summary_data,
      options = list(
        dom = 't',  # Remove search box and pagination controls
        paging = FALSE,  # Disable pagination
        ordering = FALSE  # Disable column sorting
      ),
      rownames = FALSE
    )
  })
  
################################################################################    
  
  # Heat Map by Month
  output$monthly_heatmap1 <- renderPlot({
    req(input$selection_type)
    
    if (input$selection_type %in% c("One State", "Two States")) {
      selected_state <- input$state1  # First state
      monthly_data <- accidents_midwest %>%
        filter(STATENAME == selected_state) %>%
        group_by(MONTHNAME) %>%
        summarize(Total_Fatalities = sum(total_fatalities), .groups = 'drop')
      
      ggplot(monthly_data, aes(x = MONTHNAME, y = Total_Fatalities, fill = Total_Fatalities)) +
        geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
        scale_fill_gradient(low = "lightblue", high = "red", na.value = "gray") +
        theme_minimal() +
        labs(
          title = paste("Monthly Fatalities Heatmap for", selected_state),
          x = "Month",
          y = "Total Fatalities"
        ) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    }
  })
  
###############################################################################
  
  # Used for the two state selection to display two monthly bar plots
  output$monthly_heatmap2 <- renderPlot({
    req(input$selection_type == "Two States")
    
    selected_state <- input$state2  # Second state
    monthly_data <- accidents_midwest %>%
      filter(STATENAME == selected_state) %>%
      group_by(MONTHNAME) %>%
      summarize(Total_Fatalities = sum(total_fatalities), .groups = 'drop')
    
    ggplot(monthly_data, aes(x = MONTHNAME, y = Total_Fatalities, fill = Total_Fatalities)) +
      geom_bar(stat = "identity", color = "black", show.legend = FALSE) +
      scale_fill_gradient(low = "lightblue", high = "red", na.value = "gray") +
      theme_minimal() +
      labs(
        title = paste("Monthly Fatalities Heatmap for", selected_state),
        x = "Month",
        y = "Total Fatalities"
      ) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
  
  
################################################################################  
  # Heat map of the selection from users
  output$heatmap <- renderGirafe({
    # Scales by 100k people when all Midwest states are selected
    if (input$selection_type == "All Midwest States") {
      # Calculate fatalities per 100k for each state individually
      plot_data <- accidents_midwest %>%
        group_by(STATENAME) %>%
        summarize(
          total_fatalities = sum(total_fatalities), 
          POPULATION = sum(POPULATION),
          fatalities_per_100k = (sum(total_fatalities) / sum(POPULATION)) * 100000,
          .groups = 'drop'
        )
      
      # Lowercase for merging
      plot_data$region <- tolower(plot_data$STATENAME)
      
      # Load and filter state boundaries
      states_map <- map_data("state") %>% filter(region %in% tolower(midwest_states))
      
      # Merge with state-level data
      map_data <- left_join(states_map, plot_data, by = "region")
      
      # Use fatalities per 100k for color fill
      fill_var <- "fatalities_per_100k"
      fill_label <- "Fatalities per 100k"

    } else {
      # Use county level data for selected states and show total fatalities
      # Data is not scaled when this is selected
      req(input$selection_type) # suppress error message that pops up for split second
      selected_states <- if (input$selection_type == "One State") {
        req(input$state1) # suppress error message that pops up for split second
      } else {
        req(input$state1, input$state2)
        c(input$state1, input$state2)
      }
      
      
      # Prepare county-level plot_data
      plot_data <- accidents_midwest %>%
        filter(STATENAME %in% selected_states) %>%
        group_by(STATENAME, COUNTYNAME) %>%
        summarize(total_fatalities = sum(total_fatalities), .groups = 'drop')
      
      
      # Clean COUNTYNAME by removing numbers in parentheses
      plot_data$COUNTYNAME <- str_remove(plot_data$COUNTYNAME, " \\(.*\\)")
      
      
      # Add lowercase columns for merging
      plot_data$region <- tolower(plot_data$STATENAME)
      plot_data$subregion <- tolower(plot_data$COUNTYNAME)
      
      
      # Prepare county-level map data
      county_map <- map_data("county") %>%
        filter(region %in% tolower(selected_states))
      
      
      # Use left_join to keep the structure of county_map and retain the group variable
      map_data <- left_join(county_map, plot_data, by = c("region", "subregion"))
      
      
      # Set missing values for counties with no data to zero
      map_data$total_fatalities[is.na(map_data$total_fatalities)] <- 0
      
      
      # Set fill variable for individual state or county view
      fill_var <- "total_fatalities"
      fill_label <- "Total Fatalities"
    }
    
    
    # Define the tooltip text
    map_data$tooltip_text <- paste(
      "State:", str_to_title(map_data$region),                 # str_to_title so states and 
      if (input$selection_type != "All Midwest States") {      # counties are capitalized properly
        paste("\nCounty:", str_to_title(map_data$subregion))  
      },                                                       
      paste("\n"),  #Newline for user readability
      paste(fill_label, ":", round(map_data[[fill_var]], 2))
    )
    
    
    # Create the ggplot
    gg <- ggplot(map_data, aes(x = long, y = lat, group = group, fill = .data[[fill_var]])) +
      geom_polygon_interactive(aes(tooltip = tooltip_text, data_id = group), color = "black") +
      scale_fill_gradient(low = "lightyellow", high = "red", na.value = "gray") +
        theme_minimal() +
        labs(fill = fill_label) +
          theme(
            axis.text = element_blank(), 
            axis.title = element_blank(),
            panel.grid = element_blank())
    
    
    # Render girafe plot with hover effect
    girafe(
      ggobj = gg,
      options = list(
        opts_hover(css = "fill:green;stroke-width:2px;stroke:black;") # options for hover effect
      )
    )
  })
}

# Run the app
shinyApp(ui = ui, server = server)
